{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shardId",
          "type": "uint256"
        }
      ],
      "name": "NewShard",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shardId",
          "type": "uint256"
        }
      ],
      "name": "amountOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentClock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shardId",
          "type": "uint256"
        }
      ],
      "name": "expirationOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "expiration",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shardId",
          "type": "uint256"
        }
      ],
      "name": "isValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shardId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "shardIdOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shardId",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "totalSupplyAt",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "shardId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "clock",
          "type": "uint256"
        }
      ],
      "name": "wasValid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "allSourcePaths": {
    "1": "contracts/ERC360/IERC360.sol",
    "3": "contracts/ERC360/IERC360Metadata.sol"
  },
  "ast": {
    "absolutePath": "contracts/ERC360/IERC360Metadata.sol",
    "exportedSymbols": {
      "IERC360": [
        737
      ],
      "IERC360Metadata": [
        806
      ]
    },
    "id": 807,
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 788,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".20"
        ],
        "nodeType": "PragmaDirective",
        "src": "0:24:3"
      },
      {
        "absolutePath": "contracts/ERC360/IERC360.sol",
        "file": "./IERC360.sol",
        "id": 790,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 807,
        "sourceUnit": 738,
        "src": "26:38:3",
        "symbolAliases": [
          {
            "foreign": {
              "id": 789,
              "name": "IERC360",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 737,
              "src": "34:7:3",
              "typeDescriptions": {}
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 792,
              "name": "IERC360",
              "nameLocations": [
                "183:7:3"
              ],
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 737,
              "src": "183:7:3"
            },
            "id": 793,
            "nodeType": "InheritanceSpecifier",
            "src": "183:7:3"
          }
        ],
        "canonicalName": "IERC360Metadata",
        "contractDependencies": [],
        "contractKind": "interface",
        "documentation": {
          "id": 791,
          "nodeType": "StructuredDocumentation",
          "src": "66:87:3",
          "text": " @dev Interface for the optional metadata functions from the ERC360 standard."
        },
        "fullyImplemented": false,
        "id": 806,
        "linearizedBaseContracts": [
          806,
          737
        ],
        "name": "IERC360Metadata",
        "nameLocation": "164:15:3",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "documentation": {
              "id": 794,
              "nodeType": "StructuredDocumentation",
              "src": "197:54:3",
              "text": " @dev Returns the name of the token."
            },
            "functionSelector": "06fdde03",
            "id": 799,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "name",
            "nameLocation": "265:4:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 795,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "269:2:3"
            },
            "returnParameters": {
              "id": 798,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 797,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 799,
                  "src": "295:13:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 796,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "295:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "294:15:3"
            },
            "scope": 806,
            "src": "256:54:3",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 800,
              "nodeType": "StructuredDocumentation",
              "src": "316:56:3",
              "text": " @dev Returns the symbol of the token."
            },
            "functionSelector": "95d89b41",
            "id": 805,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "symbol",
            "nameLocation": "386:6:3",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 801,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "392:2:3"
            },
            "returnParameters": {
              "id": 804,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 803,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 805,
                  "src": "418:13:3",
                  "stateVariable": false,
                  "storageLocation": "memory",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_memory_ptr",
                    "typeString": "string"
                  },
                  "typeName": {
                    "id": 802,
                    "name": "string",
                    "nodeType": "ElementaryTypeName",
                    "src": "418:6:3",
                    "typeDescriptions": {
                      "typeIdentifier": "t_string_storage_ptr",
                      "typeString": "string"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "417:15:3"
            },
            "scope": 806,
            "src": "377:56:3",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 807,
        "src": "154:281:3",
        "usedErrors": [],
        "usedEvents": [
          600,
          609,
          616
        ]
      }
    ],
    "src": "0:435:3"
  },
  "bytecode": "",
  "bytecodeSha1": "da39a3ee5e6b4b0d3255bfef95601890afd80709",
  "compiler": {
    "evm_version": "istanbul",
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "version": "0.8.21+commit.d9974bed"
  },
  "contractName": "IERC360Metadata",
  "coverageMap": {
    "branches": {},
    "statements": {}
  },
  "dependencies": [
    "IERC360"
  ],
  "deployedBytecode": "",
  "deployedSourceMap": "",
  "language": "Solidity",
  "natspec": {
    "details": "Interface for the optional metadata functions from the ERC360 standard.",
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `amount` is the new allowance."
      },
      "NewShard(address,uint256)": {
        "details": "Emitted when the current balance of an `account` is tied to a new `shardId`."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when an `amount` of tokens are moved `from` one account `to` another. Note that `amount` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "Returns the remaining amount of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This amount changes when {approve} or {transferFrom} are called."
      },
      "amountOf(uint256)": {
        "details": "Returns the amount tied to the ``shardId``."
      },
      "approve(address,uint256)": {
        "details": "Sets an `amount` of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
      },
      "balanceOf(address)": {
        "details": "Returns the amount of tokens currently owned by ``account``."
      },
      "currentClock()": {
        "details": "Returns the amount of tokens ever created."
      },
      "expirationOf(uint256)": {
        "details": "Returns the clock at which a shard with ``shardId`` expired.  Requirements: - `shardId` must exist."
      },
      "isValid(uint256)": {
        "details": "Returns true if the shard with `shardId` is currently valid. Requirements: - `shardId` must exist."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "ownerOf(uint256)": {
        "details": "Returns the owner of the `shardId` token. Requirements: - `shardId` must exist."
      },
      "shardIdOf(address)": {
        "details": "Returns the current shard with `shardId` tied to an ``account``."
      },
      "symbol()": {
        "details": "Returns the symbol of the token."
      },
      "totalSupply()": {
        "details": "Returns the amount of currently valid tokens in existence."
      },
      "totalSupplyAt(uint256)": {
        "details": "Returns the amount of valid tokens in existence at a specific timeframe."
      },
      "transfer(address,uint256)": {
        "details": "Moves an `amount` of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "transferFrom(address,address,uint256)": {
        "details": "Moves an `amount` of tokens `from` one account `to` another using the allowance mechanism. The `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
      },
      "wasValid(uint256,uint256)": {
        "details": "Returns true if the shard with `shardId` was valid at 'clock'. Requirements: - `shardId` must exist."
      }
    },
    "version": 1
  },
  "offset": [
    154,
    435
  ],
  "opcodes": "",
  "pcMap": {},
  "sha1": "ace98b11a0adc92eac546621be66c8bd196ebb4e",
  "source": "pragma solidity ^0.8.20;\n\nimport {IERC360} from \"./IERC360.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC360 standard.\n */\ninterface IERC360Metadata is IERC360 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n}",
  "sourceMap": "",
  "sourcePath": "contracts/ERC360/IERC360Metadata.sol",
  "type": "interface"
}